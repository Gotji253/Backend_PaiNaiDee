# Project Settings
PROJECT_NAME="Pai Nai Dee API - Development"
PROJECT_VERSION="0.1.0"

# Database Configuration
# Choose one connection type or override DATABASE_URL directly

# Option 1: PostgreSQL (Comment out if using SQLite or direct DATABASE_URL)
POSTGRES_USER=admin
POSTGRES_PASSWORD=supersecretpassword
POSTGRES_SERVER=localhost
POSTGRES_PORT=5432
POSTGRES_DB=painaidee_dev

# Option 2: Provide a full DATABASE_URL (e.g., for SQLite or other DBs)
# This will override the individual POSTGRES_* variables if uncommented.
# DATABASE_URL="sqlite:///./test.db"
# DATABASE_URL="postgresql://admin:supersecretpassword@localhost:5432/painaidee_dev"

# API Settings
API_V1_STR="/api/v1"

# Security Settings - IMPORTANT: Change these for production!
SECRET_KEY="your_super_secret_random_key_here_at_least_32_chars_long"
ACCESS_TOKEN_EXPIRE_MINUTES=60 # Example: 1 hour
ALGORITHM="HS256"

# CORS Origins (Space separated if multiple, or use JSON-like list if your settings parsing supports it)
# Example: BACKEND_CORS_ORIGINS=["http://localhost:3000", "https://your.frontend.domain"]
# For BaseSettings, you might need to process this string into a list in your config.py or use a different loader.
# For now, pydantic-settings doesn't directly parse comma-separated strings into lists for env vars without custom logic.
# If you need a list, define it in config.py or handle parsing.
# For simplicity, if only one or a few, you can define them directly in config.py or handle them one by one.
# Example if your settings class expects a list and you want to load it from a string:
# BACKEND_CORS_ORIGINS='["http://localhost:3000","http://localhost:8001"]'
# Then in Settings:
# from pydantic import field_validator
# ...
# BACKEND_CORS_ORIGINS: list[str] = []
# @field_validator("BACKEND_CORS_ORIGINS", mode="before")
# def assemble_cors_origins(cls, v: str) -> list[str]:
# if isinstance(v, str) and not v.startswith("["):
# return [i.strip() for i in v.split(",")]
# elif isinstance(v, (list, str)): # If it's already a list or a JSON-like string
# import json
# return json.loads(v) if isinstance(v, str) else v
# return []
